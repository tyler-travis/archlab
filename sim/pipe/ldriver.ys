#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl 63, %eax		# src and dst have 63 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	halt			# should halt with num nonzeros in %eax
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
# Tyler Travis - A01519795
# Tyler Tolman - A01307949
#
# Describe how and why you modified the baseline code.
#
##################################################################
	# Function prologue. Do not modify.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
        pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 12(%ebp),%ecx	# dst
	mrmovl 16(%ebp),%edx	# len

	# Loop header
	xorl %eax,%eax		# count = 0;
	andl %edx,%edx		# len <= 0?
	jle Done		# if so, goto Done:
        iaddl $-6, %edx         # len = len - 6
        jl End1

	# Loop body.
Loop:	mrmovl (%ebx), %esi	# read val from src
        mrmovl 4(%ebx), %edi    # read val from src + 4
	rmmovl %esi, (%ecx)	# move src[0] to dest[0]
	andl %esi, %esi		# val <= 0?
	jle Pos1		# if so, goto Pos1:
	iaddl $1, %eax		# count++

Pos1:	rmmovl %edi, 4(%ecx)    # move src[1] to dest[1]
        andl %edi, %edi         # src[1] > 0?
        jle Pos2                # if not get next element
        iaddl $1, %eax          # count++

Pos2:	mrmovl 8(%ebx), %esi	# read val from src + 8
        mrmovl 12(%ebx), %edi   # read val from src + 12
	rmmovl %esi, 8(%ecx)	# move src[2] to dest[2]
	andl %esi, %esi		# src[2] > 0
	jle Pos3		# if not goto Pos3
	iaddl $1, %eax		# count++

Pos3:	rmmovl %edi, 12(%ecx)   # move src[3] to dest[3]
        andl %edi, %edi         # src[3] > 0?
        jle Pos4                # if not get next element
        iaddl $1, %eax          # count++

Pos4:	mrmovl 16(%ebx), %esi	# read val from src + 16 
        mrmovl 20(%ebx), %edi   # read val from src + 20
	rmmovl %esi, 16(%ecx)	# move src[4] to dest[4]
	andl %esi, %esi		# src[4] > 0
	jle Pos5		# if not goto Pos5
	iaddl $1, %eax		# count++

Pos5:	rmmovl %edi, 20(%ecx)   # move src[5] to dest[5]
        andl %edi, %edi         # src[5] > 0?
        jle Pos6                # if not get next element
        iaddl $1, %eax          # count++

Pos6:   iaddl $24, %ebx         # go to next 6 positions for src
        iaddl $24, %ecx         # go to next 6 positions for dest
        iaddl $-6, %edx         # len = len - 6
        jge Loop                # if 6 left, loop again

End1:   iaddl $6, %edx          # restore length
        iaddl $-1, %edx         # len = len - 1
        jl Done
        mrmovl (%ebx), %esi     # read val from src
        mrmovl 4(%ebx), %edi    # read val from src + 4
        rmmovl %esi, (%ecx)     # move src[0] to dest[0]
        andl %esi, %esi         # src[0] > 0?
        jle End2                # if so, goto End2
        iaddl $1, %eax          # count++

End2:   iaddl $-1, %edx         # len = len - 1
        jl Done
        rmmovl %edi, 4(%ecx)    # move src[1] to dest[1]
        andl %esi, %esi         # src[1] > 0?
        jle End3                # if so, goto End3
        iaddl $1, %eax          # count++

End3:   iaddl $-1, %edx
        jl Done
        mrmovl 8(%ebx), %esi    # read val from src + 8
        mrmovl 12(%ebx), %edi   # read val from src + 12
        rmmovl %esi, 8(%ecx)    # move src[2] to dest[2]
        andl %esi, %esi         # src[2] > 0?
        jle End4                # if so, goto End4
        iaddl $1, %eax          # count++

End4:   iaddl $-1, %edx         # len = len - 1
        jl Done
        rmmovl %edi, 12(%ecx)   # move src[3] to dest[3]
        andl %esi, %esi         # src[3] > 0?
        jle End5                # if so, goto End5
        iaddl $1, %eax          # count++

End5:   iaddl $-1, %edx
        jl Done
        mrmovl 16(%ebx), %esi   # read val from src + 16 
        rmmovl %esi, 16(%ecx)   # move src[4] to dest[4]
        andl %esi, %esi         # src[4] > 0?
        jle Done                # if so, goto Done
        iaddl $1, %eax          # count++



	# Function epilogue. Do not modify.
Done:   popl %edi
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
#/* $end ncopy-ys */
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

###############################
# Source and destination blocks 
###############################
	.align 4
src:	.long 0
	.long 1
	.long 2
	.long 3
	.long 4
	.long 5
	.long 6
	.long 7
	.long 8
	.long 9
	.long 10
	.long 11
	.long 12
	.long 13
	.long 14
	.long 15
	.long 16
	.long 17
	.long 18
	.long 19
	.long 20
	.long 21
	.long 22
	.long 23
	.long 24
	.long 25
	.long 26
	.long 27
	.long 28
	.long 29
	.long 30
	.long 31
	.long 32
	.long 33
	.long 34
	.long 35
	.long 36
	.long 37
	.long 38
	.long 39
	.long 40
	.long 41
	.long 42
	.long 43
	.long 44
	.long 45
	.long 46
	.long 47
	.long 48
	.long 49
	.long 50
	.long 51
	.long 52
	.long 53
	.long 54
	.long 55
	.long 56
	.long 57
	.long 58
	.long 59
	.long 60
	.long 61
	.long 62
	.long 63
        .long 0x0f0f0f0f # This shouldn't get moved

	.align 16
dest:	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xbeef
	.long 0xdeadbeef

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
Stack:
